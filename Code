Application Deployment

(Deploy the given react application to a production ready state)

Application:

Clone the below mentioned repo and deploy the application. (Run the application in port 80

[HTTP])

Repo URL: https://github.com/sriram-R-krishnan/devops-build

Docker:

Dockerize the application by creating a Dockerfile

Create a docker-compose file to use the above image

Bash Scripting: Write 2 scripts

build.sh-for building docker images

deploy sh for deploying the image to server

Version Control:

Push the code to github to dev branch (use dockerignore & gitignore files)

Note: Use only CLI for related git commands

Docker hub:

Create 2 repos "dev" and "prod" to push images. "Prod" repo must be private and "dev" repo can be public

Jenkins:

Install and configure jenkins build step as per needs to build, push & deploy the application

Connect jenkins to the github repo with auto build trigger from both dev & master branch If code pushed to dev branch, docker image must build and pushed to dev repo in docker hub

• If dev merged to master, then docker image must be pushed to prod repo in docker hub

AWS:

Launch 12 micro instance and deploy the create application

Configure SG as below

Whoever has the ip address can access the application

Login to server can should be made only from your ip address
Monitoring:

• Setup a monitoring system to check the health status of the application (Open-source)

• Sending notifications only if the application goes down is highly appreciable

Submission:

• Github repo URL, deployed site URL, docker images name must be added in the submission

• Upload the screenshots of below mentioned to github repo

Jenkins (login page, configuration settings, execute step commands)

AWS (EC2-Console, SG configs)

Docker hub repo with image tags

• Deployed site page

Monitoring health check status




Here's a breakdown of the tasks for deploying the React application as per your requirements:

### 1. **Clone and Dockerize the Application**

- **Clone the Repository**:
  ```bash
  git clone https://github.com/sriram-R-krishnan/devops-build
  cd devops-build
  ```

- **Dockerize the Application**:
  - Create a `Dockerfile` to containerize the application:
    ```Dockerfile
    # Base image
    FROM node:14-alpine
    
    # Set working directory
    WORKDIR /app
    
    # Copy package.json and install dependencies
    COPY package*.json ./
    RUN npm install
    
    # Copy the rest of the application
    COPY . .
    
    # Build the application
    RUN npm run build
    
    # Expose port 80
    EXPOSE 80
    
    # Start the application
    CMD ["npx", "serve", "-s", "build", "-l", "80"]
    ```

  - Create a `.dockerignore` file to exclude unnecessary files from the Docker image.

- **Create a `docker-compose.yml`** to manage the Docker container:
    ```yaml
    version: '3'
    services:
      app:
        build: .
        ports:
          - "80:80"
    ```

### 2. **Bash Scripting**

- **`build.sh` Script**: For building the Docker image.
    ```bash
    #!/bin/bash
    docker build -t devops-app .
    ```

- **`deploy.sh` Script**: For deploying the Docker image to the server.
    ```bash
    #!/bin/bash
    docker-compose up -d
    ```

### 3. **Version Control**

- Add a `.gitignore` file to exclude unnecessary files.
- **Push to GitHub** (dev branch) using CLI:
    ```bash
    git init
    git add .
    git commit -m "Initial commit for dev deployment"
    git branch -M dev
    git remote add origin <your-repo-url>
    git push -u origin dev
    ```

### 4. **Docker Hub Repositories**

- Create two Docker Hub repositories:
  - **"dev"** (public): For the development image.
  - **"prod"** (private): For the production image.

### 5. **Jenkins Setup**

1. **Install and Configure Jenkins**:
   - Install Jenkins and necessary plugins (Git, Docker, Docker Pipeline).
   
2. **Create Build Pipeline**:
   - Set up Jenkins to connect to the GitHub repository and auto-trigger builds:
     - Trigger builds when code is pushed to `dev` or `master`.
     - For `dev` branch, build and push the Docker image to the `dev` repo in Docker Hub.
     - When merging `dev` to `master`, push the Docker image to the `prod` repo in Docker Hub.

### 6. **AWS Deployment**

1. **Launch an EC2 Instance**:
   - Launch a t2.micro instance (free tier if applicable) and configure the following:
     - Security Group to allow HTTP access only to specific IP addresses.
     - Allow SSH access only from your IP address.

2. **Deploy the Application**:
   - SSH into the EC2 instance and run `deploy.sh` to start the application container.

### 7. **Monitoring**

1. **Install Monitoring Tool**:
   - Use an open-source monitoring tool like **Prometheus** or **Nagios**.
   - Set up to monitor the application's health and send notifications if the application goes down.

### 8. **Submission Requirements**

- **GitHub Repo URL**: Include the repository link.
- **Deployed Site URL**: Provide the public URL for accessing the site.
- **Docker Image Names**: Include the Docker Hub image names for dev and prod repos.

- **Screenshots**:
  - Jenkins (login page, configuration settings, execute step commands).
  - AWS (EC2 Console, Security Group configurations).
  - Docker Hub repo with image tags.
  - Deployed application page.
  - Monitoring health check status
